generator client {
  provider = "prisma-client-js"
  output   = "./src/generated/prisma"
}

generator pothos {
  provider = "prisma-pothos-types"
  clientOutput = "../prisma"
  output   = "./src/generated/pothos/types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// https://next-auth.js.org/adapters/models
/// The Account model is for information about OAuth accounts associated with a User.
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])

  @@map(name: "acounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

/// sqlite では enum がまだ使えないので String にしておく
/// https://github.com/huv1k/nextjs-auth-prisma/blob/master/prisma/schema.prisma
// USER or ADMIN
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  role          String @default("USER")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  todos     Todo[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])

  @@map(name: "verificationTokens")
}


model Todo {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title String
  description String
  published Boolean @default(false)
  user User @relation(fields: [userId], references: [id])
  userId String
}